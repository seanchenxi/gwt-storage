<!--
  Copyright 2013 Xi CHEN
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
     http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->
<module>

  <inherits name="com.google.gwt.lang.LongLib"/>
  <inherits name="com.google.gwt.storage.Storage" />

  <!--
      Define if to use memory cache or not. default value is "true".
  -->
  <define-property name="storage.cache" values="true, false" />
  <set-property-fallback name="storage.cache" value="true" />
  <set-property name="storage.cache" value="true" />
  
  <!--
     Configuration property define how to find types that will persist in web storage
     Valid values are (case insensitive): rpc/xml/mix(others are treated as mix).
   -->
  <define-configuration-property name="storage.type.finder" is-multi-valued="false" />
  <set-configuration-property name="storage.type.finder" value="rpc"/>

  <!--
      Contains regular expressions, optionally prefixed with '+' or '-'.
      Each type being considered for serialization is tested against the
      list of expressions in order, and if there is a match it is added to the
      blacklist (if the prefix is '-' or no prefix is present), or removed (if
      the prefix is '+').  If multiple entries in the list match a supplied
      class, then the last one 'wins.'  For generic types, the regular
      expression is applied to just the base class's fully qualified name.
  -->
  <define-configuration-property name="storage.blacklist" is-multi-valued="true" />

  <!--
    Define if to use memory cache or not. default value is "true".
  -->
  <define-property name="storage.serverReadable" values="true, false" />
  <set-property-fallback name="storage.serverReadable" value="false" />
  <set-property name="storage.serverReadable" value="false" />

  <generate-with class="com.seanchenxi.gwt.storage.rebind.StorageKeyProviderGenerator">
    <when-type-assignable class="com.seanchenxi.gwt.storage.client.StorageKeyProvider"/>
  </generate-with>

  <generate-with class="com.seanchenxi.gwt.storage.rebind.StorageTypeSerializerGenerator">
  	<when-type-is class="com.seanchenxi.gwt.storage.client.serializer.StorageTypeSerializer"/>
  </generate-with>
  
  <replace-with class="com.seanchenxi.gwt.storage.client.cache.StorageMemoryCache">
  	<when-type-is class="com.seanchenxi.gwt.storage.client.cache.StorageCache" />
  	<when-property-is name="storage.cache" value="true"/>
  </replace-with>
  
  <replace-with class="com.seanchenxi.gwt.storage.client.cache.NoStorageCache">
  	<when-type-is class="com.seanchenxi.gwt.storage.client.cache.StorageCache" />
  	<when-property-is name="storage.cache" value="false"/>
  </replace-with>
 
  <replace-with class="com.seanchenxi.gwt.storage.client.serializer.ServerReadableStorageSerializerImpl">
  	<when-type-is class="com.seanchenxi.gwt.storage.client.serializer.StorageSerializer" />
    <when-property-is name="storage.serverReadable" value="true" />
  </replace-with>

  <replace-with class="com.seanchenxi.gwt.storage.client.serializer.StorageRPCSerializerImpl">
    <when-type-is class="com.seanchenxi.gwt.storage.client.serializer.StorageSerializer" />
    <when-property-is name="storage.serverReadable" value="false" />
  </replace-with>

  <source path='client'/>
  <source path="shared" />
  <super-source path="translatable" />
  
</module>